paths:
  /admins:
    post:
      description: create one admin
      summary: create admins
      tags:
        - admins
      servers:
        - url: http://baseUrl/admins
          description: Production server
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST 'http://baseUrl/admins' \
            --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwa...' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "firstName": "al",
                "lastName": "abdi",
                "phoneNumber": "09394552776",
                "passwordConfirm": "!QAZ1qaz",
                "password": "!QAZ1qaz"
            }'
        - lang: node.js
          source: |
            var request = require('request');
            var options = {
              'method': 'POST',
              'url': 'http://baseUrl/admins',
              'headers': {
                'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwa...',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                "firstName": "al",
                "lastName": "abdi",
                "phoneNumber": "09394552776",
                "passwordConfirm": "!QAZ1qaz",
                "password": "!QAZ1qaz"
              })

              };
              request(options, function (error, response) {
                if (error) throw new Error(error);
                console.log(response.body);
              });


      parameters:
        - name: auth
          in: header
          description: an authorization header
          required: true
          type: string

      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties: 
                firstName:
                  type: string
                  example: علی
                lastName:
                  type: string
                  example: عبدی
                phoneNumber:
                  type: string
                  example: 09394552776
                password:
                  type: string
                  description: password must be 8 character or more and strong pass(contain number letter, ...)
                  example: "!QAZ1qaz"
                passwordConfirm: 
                  type: string
                  example: "!QAZ1qaz"

      responses:
        "201":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "درخواست انجام شد"
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      phoneNumber: 
                        type: string
                      __v: 
                        type: number
                    example:  {
                      "_id": "63e571e83e46dfa3902bedc3",
                      "firstName": "علی",
                      "lastName": "عبدی",
                      "phoneNumber": "+989394552776",
                      "__v": 0
                    }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    example: [
                      "نام خانوادگی باید به صورت حروف وارد شود",
                      "نام نمی تواند خالی باشد",
                      "شماره موبایل در سیستم وجود دارد"
                    ]
                  statusCode: 
                    type: string
                    example: 400
                  error:
                    type: string
                    example: bad request

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
                  statusCode: 
                    type: string
                    example: 401
        
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden resource"
                  statusCode: 
                    type: string
                    example: 403

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "Cannot Patch /admins/xxxxxxxxxxx"
                  statusCode: 
                    type: string
                    example: 404
        "500":
          description: Internet Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"
                  statusCode: 
                    type: string
                    example: 500

