paths:
  /users/info:
    get:
      description: Get user information by self
      summary: Get user
      tags:
        - users
      servers:
        - url: http://baseUrl
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET 'http://baseUrl/users/info' \
            --header 'Authorization: Bearer eyJhbGciOiJIUzI...'
        - lang: node.js
          source: |
            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'http://baseUrl/users/info',
              'headers': {
                'Authorization': 'Bearer eyJhbGciOiJIUzI...'
              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
      parameters:
        - name: auth
          in: header
          description: an authorization header
          required: true
          type: string

      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "درخواست انجام شد"
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      phoneNumber: 
                        type: string
                      createdAt: 
                        type: string
                      updatedAt: 
                        type: string
                      __v: 
                        type: number
                      address: 
                        type: object  
                        properties:
                          postalAddress: 
                            type: string
                          province: 
                            type: string
                          city: 
                            type: string
                          plaque: 
                            type: string
                          recipient: 
                            type: object
                            properties:
                              firstName: 
                                type: string
                              lastName: 
                                type: string
                              phoneNumber: 
                                type: string
                          postalCode: 
                            type: string
                      firstName: 
                        type: string
                      lastName: 
                        type: string
                    example: {
                      "_id": "64724cba6666c49e972a846c",
                      "phoneNumber": "+989394552776",
                      "createdAt": "2023-05-27T18:32:26.660Z",
                      "updatedAt": "2023-06-04T20:57:22.642Z",
                      "__v": 0,
                      "address": {
                          "postalAddress": "استان فارس - شهرستان فسا - بخش ششده و قره بلاا عبدی",
                          "province": "البرز",
                          "city": "چهارباغ",
                          "plaque": "256",
                          "recipient": {
                              "firstName": "محمد",
                              "lastName": "عبدی",
                              "phoneNumber": "+989363658879"
                          },
                          "postalCode": "7466135566"
                      },
                      "firstName": "علی",
                      "lastName": "عبدی"
                    }

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
                  statusCode: 
                    type: string
                    example: 401
        
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden resource"
                  statusCode: 
                    type: string
                    example: 403

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "Cannot GET /invalid-address"
                  statusCode: 
                    type: string
                    example: 404

        "500":
          description: Internet Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"
                  statusCode: 
                    type: string
                    example: 500

